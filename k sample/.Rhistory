p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case2.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
p_values_KS_re[j] <- KS_pvalue_re(people, people_size)
#p_values_KM[j] <- PKS_pvalue(H_clustering(A, B, k))
}
j
fix(multinom)
fit <- multinom(group~., data=X)
fix(multinom)
fix(nnet.default)
fit <- multinom(group~., data=X)
fix(nnet.default)
.C
fix(.C)
fix(.Primitive)
fix(multinom)
fix(multinomHess)
multinomHess
fix(nnet.default)
fix(match.call)
sys.parent()
fit <- multinom(group~., data=X)
multinom
choose(2)
choose(10,2)
p.values <- NULL
p.values <- c(p.values, 1)
p.values
quantile(c(1,2,3,4),0.025)
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 1000
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject_re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
reject_re[j] <- KS_pvalue_re(people, people_size)
#reject_re.pair[j] <- KS_pvalue_re.pairwise(people, people_size)
}
print(mean(reject_re))
quantile(p_values,0.025)
source("sim_case_equ.R")
X <- people
size <- people_size
p_0 <- KS_pvalue.3(X, size)
p_0
p_values <- rep(0, resample_time)
resample_time=100
p_values <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
p_values[i] <- KS_pvalue.3(X[choice, ], size)
}
p_values
quantile(p_values,0.025)
quantile(p_values,0.975)
p_0
mean(p_values <= (1-p_0) | p_values >= p_0)
quantile(p_values,0.025) | p_0 >= quantile(p_values,0.975)
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 1000
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
p_values_re <- rep(0, test_times)
p_values_re.pair <- rep(0, test_times)
p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#p_values_re[j] <- KS_pvalue_re(people, people_size)
p_values_re.pair[j] <- KS_pvalue_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
# [1] 0.784
print(mean(p_values_KS <= 0.05))
# [1]
print(mean(p_values_re <= 0.05))
# [1]
print(mean(p_values_re.pair <= 0.05))
# [1]
p_values_re.pair
mean(p_values)
p_values
p_0
mean(p_values)
mean(p_values <= (1-p_0) | p_values >= p_0)
mean(p_values >= p_0)
mean(p_values)*2-p_0
?return
PKS_pvalue <- function(table){
table <- table + 1e-10
n <- sum(table)
G_square <- 0
for (i in 1:dim(table)[1]){
n_i <- sum(table[i,])
for (j in 1:dim(table)[2]){
n_j <- sum(table[,j])
G_square <- G_square + (table[i,j]-n_i*n_j/n)^2/(n_i*n_j/n)
}
}
df <- (dim(table)[1]-1) * (dim(table)[2]-1)
p_value <- 1-pchisq(G_square, df)
return(list(p_value, sta=G_square))
}
PKS_pvalue(matrix(c(1,2,3,4),nrow=2))
PKS_pvalue(matrix(c(1,2,3,4),nrow=2))$sta
?ks.test
ks.test(c(1,2,3,4),c(1,2,3,4))
ks.test(c(1,2,3,4),c(1000,1,-1000,2))
ks.test(c(1,2,3,4),c(1000,10001,1000001,10000001))
ks.test(c(1,2,3,4),c(1000,10001,1000001,10000001)) ->a
a
a$statistic
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
p_values_re <- rep(0, test_times)
p_values_re.pair <- rep(0, test_times)
p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#p_values_re[j] <- KS_re(people, people_size)
p_values_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
set.seed(1)
source("sim_case_equ.R")
X<-people
size<- people_size
KS_sta(X, size)
KS_sta(X, size)
G_0 <- KS_sta(X, size)
G.boot <- rep(0, resample_time)
resample_time=100
G.boot <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS_sta(X[choice, ], size)
}
G_0 <= quantile(G.boot, 0.025) | G_0 >= quantile(G.boot, 0.975)
quantile(G.boot, 0.025)
quantile(G.boot, 0.975)
G_0 <= quantile(G.boot, 0.025) | G_0 >= quantile(G.boot, 0.975)
X <- data.frame(X, group=rep(0:(length(size)-1), size))
sta <- 0
for (i in 1:(length(size)-1)){
for (j in (i+1):length(size)){
A <- X[X$group==i-1,]; A$group <- 0
B <- X[X$group==j-1,]; B$group <- 1
pooled <- rbind(A, B)
glm.fit <- glm(group~., data=pooled, family=binomial)
prob_test_A <- predict(glm.fit,A,type="response")
prob_test_B <- predict(glm.fit,B,type="response")
KS <- ks.test(prob_test_A, prob_test_B)$statistic
sta <- sta + KS$statistic
}
}
prob_test_A
ks.test(prob_test_A, prob_test_B)
X <- data.frame(X, group=rep(0:(length(size)-1), size))
sta <- 0
for (i in 1:(length(size)-1)){
for (j in (i+1):length(size)){
A <- X[X$group==i-1,]; A$group <- 0
B <- X[X$group==j-1,]; B$group <- 1
pooled <- rbind(A, B)
glm.fit <- glm(group~., data=pooled, family=binomial)
prob_test_A <- predict(glm.fit,A,type="response")
prob_test_B <- predict(glm.fit,B,type="response")
KS <- ks.test(prob_test_A, prob_test_B)
sta <- sta + KS$statistic
}
}
sta
sta
G_0 <- KS.pairwise(X, size)
G.boot <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS.pairwise(X[choice, ], size)
}
G_0 <= quantile(G.boot, 0.025) | G_0 >= quantile(G.boot, 0.975)
G.boot
G_0
G_0 <- KS.pairwise(X, size)
G.boot <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS.pairwise(X[choice, ], size)
}
sample(1:nrow(X), size[j])
G.boot
quantile(G.boot, 0.975)
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
choice
1:nrow(X)
size
sample(1:nrow(X), size[j]
)
KS.pairwise(X[choice, ], size)
KS <- ks.test(prob_test_A, prob_test_B)
KS.pairwise <- function(X, size){
X <- data.frame(X, group=rep(0:(length(size)-1), size))
sta <- 0
for (i in 1:(length(size)-1)){
for (j in (i+1):length(size)){
A <- X[X$group==i-1,]; A$group <- 0
B <- X[X$group==j-1,]; B$group <- 1
pooled <- rbind(A, B)
glm.fit <- glm(group~., data=pooled, family=binomial)
prob_test_A <- predict(glm.fit,A,type="response")
prob_test_B <- predict(glm.fit,B,type="response")
KS <- ks.test(prob_test_A, prob_test_B)
sta <- sta + KS$statistic
}
}
sta
}
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS.pairwise(X[choice, ], size)
}
G_0 <- KS.pairwise(X, size)
G.boot <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS.pairwise(X[choice, ], size)
}
G.boot
G_0 <= quantile(G.boot, 0.025) | G_0 >= quantile(G.boot, 0.975)
G_0 <- KS.pairwise(X, size)
G_0
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
KS.pairwise(X, size)
View(norm_dist)
View(X)
X<- people
size
KS.pairwise(X, size)
G_0 <- KS.pairwise(X, size)
G.boot <- rep(0, resample_time)
for (i in 1:resample_time){
choice <- c()
for (j in 1:length(size)){ # choose with replacement
choice <- c(choice, sample(1:nrow(X), size[j]))
}
G.boot[i] <- KS.pairwise(X[choice, ], size)
}
G.boot
G_0 <= quantile(G.boot, 0.025) | G_0 >= quantile(G.boot, 0.975)
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
p_values_re <- rep(0, test_times)
p_values_re.pair <- rep(0, test_times)
p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#p_values_re[j] <- KS_re(people, people_size)
p_values_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
p_values_re.pair
print(mean(p_values_re.pair))
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
p_values_re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
p_values_KM <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
p_values_re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
p_values_re
mean(p_values_re)
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject__re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#reject__re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
1-0.975
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject__re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#reject__re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 100
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject__re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
reject__re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
print(mean(reject_re))
reject__re
print(mean(reject__re))
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 200
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject__re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
reject_re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
print(mean(p_values_KS <= 0.05))
print(mean(reject_re))
print(mean(reject_re.pair))
reject_re
d
d
d
d
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 200
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject_re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
reject_re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
print(mean(p_values_KS <= 0.05))
print(mean(reject_re))
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 200
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject_re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
#p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
reject_re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
print(mean(p_values_KS <= 0.05))
print(mean(reject_re))
print(mean(reject_re.pair))
reject_re
set.seed(1)
source("supplement.R");
source("KM_func.R");source("ES_func.R");source("KS_func.R")
sep_ratio <- 0.65
test_times <- 200
k <- 10
p_values_ES <- rep(0, test_times)
p_values_KS <- rep(0, test_times)
reject_re <- rep(0, test_times)
reject_re.pair <- rep(0, test_times)
for (j in 1:test_times){
source("sim_case_equ.R")
p_values_ES[j] <- eqdist.etest(people, people_size, R=100)$p.value
#p_values_KS[j] <- KS_pvalue(people, people_size, 0.7)
#reject_re[j] <- KS_re(people, people_size)
#reject_re.pair[j] <- KS_re.pairwise(people, people_size)
cat(j,'\n')
}
print(mean(p_values_ES <= 0.05))
print(mean(p_values_KS <= 0.05))
?sample
getwd()
setwd(/Users/gongkang/Document/Data Minging)
setwd("/Users/gongkang/Document/Data Mining")
library(arules)
source('~/Documents/Techniques for Data Mining/Assignment/HW3/titanic/Dataset.data', encoding = 'UTF-8')
titanic <- read.table('~/Documents/Techniques for Data Mining/Assignment/HW3/titanic/Dataset.data')
names(titanic) <- c("Class", "Age", "Sex", "Survived")
titanic
supp <- 0.1
conf <- 0.8
unique(titanic)
as.vector(titanic)
as.vector.factor(titanic)
？merge()
?merge()
?merge
